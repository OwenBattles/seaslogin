#!/bin/bash

# --- Configuration ---
# A unique name for the credential service to identify our stored password
SERVICE_NAME="seasnet-login-script"
# The config file where the email/username will be stored
CONFIG_FILE="$HOME/.seaslogin_config"

# --- Platform Detection ---
detect_platform() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "macos"
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "linux"
  else
    echo "unsupported"
  fi
}

PLATFORM=$(detect_platform)

# --- Function to Set/Update Credentials ---
set_credentials() {
  echo "--- Set/Update SEASnet Credentials ---"
  read -p "Enter your SEASnet email/username: " email

  # Prompt for the password securely (the -s flag hides the input)
  read -sp "Enter the password for ${email}: " password
  echo "" # Print a newline after the hidden input

  # Store the email in the plain-text config file
  echo "export SEAS_EMAIL='${email}'" > "${CONFIG_FILE}"

  # Store password securely based on platform
  case "$PLATFORM" in
    "macos")
      # Securely add or update the password in the macOS Keychain
      security add-generic-password -a "${email}" -s "${SERVICE_NAME}" -w "${password}" -U
      ;;
    "linux")
      # Store password using secret-tool (GNOME Keyring)
      # First, try to delete any existing entry
      secret-tool clear --label="${SERVICE_NAME}" service "${SERVICE_NAME}" user "${email}" 2>/dev/null || true
      # Store the new password
      echo "${password}" | secret-tool store --label="${SERVICE_NAME}" service "${SERVICE_NAME}" user "${email}"
      ;;
    *)
      echo "Error: Unsupported platform. Only macOS and Linux are supported."
      return 1
      ;;
  esac

  echo "Credentials have been securely stored."
}

# --- Function to Log In ---
login() {
  echo "--- Login to SEASnet ---"
  # Check if the config file exists first
  if [ ! -f "${CONFIG_FILE}" ]; then
    echo "Error: Credentials not set. Please use option 1 first."
    return
  fi

  # Load the email address from our config file
  source "${CONFIG_FILE}"

  echo "Attempting to log in as ${SEAS_EMAIL}..."

  # Retrieve the password securely based on platform
  case "$PLATFORM" in
    "macos")
      PASSWORD=$(security find-generic-password -a "${SEAS_EMAIL}" -s "${SERVICE_NAME}" -w)
      ;;
    "linux")
      PASSWORD=$(secret-tool lookup service "${SERVICE_NAME}" user "${SEAS_EMAIL}")
      ;;
    *)
      echo "Error: Unsupported platform. Only macOS and Linux are supported."
      return 1
      ;;
  esac

  # Check if the password was found
  if [ -z "$PASSWORD" ]; then
    echo "Error: Password not found in credential store for this user."
    echo "Please use option 1 to set your credentials."
    return
  fi

  # Use the retrieved credentials to log in
  sshpass -p "$PASSWORD" ssh "$SEAS_EMAIL"
}

# --- Function to Check Dependencies ---
check_dependencies() {
  local missing_deps=()
  
  # Check for sshpass
  if ! command -v sshpass &> /dev/null; then
    missing_deps+=("sshpass")
  fi
  
  # Check platform-specific dependencies
  case "$PLATFORM" in
    "macos")
      if ! command -v security &> /dev/null; then
        missing_deps+=("security (macOS Keychain)")
      fi
      ;;
    "linux")
      if ! command -v secret-tool &> /dev/null; then
        missing_deps+=("secret-tool (GNOME Keyring)")
      fi
      ;;
  esac
  
  if [ ${#missing_deps[@]} -gt 0 ]; then
    echo "Error: Missing required dependencies:"
    for dep in "${missing_deps[@]}"; do
      echo "  - $dep"
    done
    echo ""
    echo "Installation instructions:"
    case "$PLATFORM" in
      "macos")
        echo "  sshpass: brew install hudochenkov/sshpass/sshpass"
        echo "  security: Already included with macOS"
        ;;
      "linux")
        echo "  sshpass: sudo apt-get install sshpass (Ubuntu/Debian)"
        echo "           sudo yum install sshpass (RHEL/CentOS)"
        echo "  secret-tool: sudo apt-get install libsecret-tools (Ubuntu/Debian)"
        echo "               sudo yum install libsecret-tools (RHEL/CentOS)"
        ;;
    esac
    exit 1
  fi
}

# --- Main Script ---
# Check dependencies first
check_dependencies

# --- Main Menu Loop ---
while true
do
  echo ""
  echo "SEASnet Login Utility ($PLATFORM)"
  echo "--------------------------------"
  echo "1) Set/Update Credentials"
  echo "2) Login to SEASnet"
  echo "3) Exit"
  echo "--------------------------------"

  read -p "Enter your choice [1-3]: " choice

  case "$choice" in
    1)
      set_credentials
      ;;
    2)
      login
      ;;
    3)
      echo "Exiting."
      break
      ;;
    *)
      echo "Invalid option. Please try again."
      ;;
  esac
done